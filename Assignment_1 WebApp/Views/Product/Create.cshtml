@model Assignment_1_API.Models.Product

@{
    ViewData["Title"] = "Create";
}

<h1>Create</h1>

<h4>Product</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form id="createForm">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="ProductName" class="control-label"></label>
                <input asp-for="ProductName" class="form-control" id="ProductName" />
                <span asp-validation-for="ProductName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="CategoryId" class="control-label"></label>
                <select asp-for="CategoryId" class="form-control" id="CategoryId"></select>
            </div>
            <div class="form-group">
                <label asp-for="UnitPrice" class="control-label"></label>
                <input asp-for="UnitPrice" class="form-control" id="UnitPrice" />
                <span asp-validation-for="UnitPrice" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const createForm = document.getElementById("createForm");

        // Fetch categories and populate the select element
        fetch("https://localhost:7271/odata/Categories", {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        })
            .then(response => response.json())
            .then(data => {
                const categorySelect = document.getElementById("CategoryId");
                const categories = data.value;

                // Populate the select element with categories
                categories.forEach(category => {
                    const option = document.createElement("option");
                    option.value = category.CategoryId;
                    option.textContent = category.CategoryName;
                    categorySelect.appendChild(option);
                });
            })
            .catch(error => {
                console.error("Error fetching categories:", error);
                alert("Error fetching categories. Please try again later.");
            });

        createForm.addEventListener("submit", function (event) {
            event.preventDefault();

            const product = {
                ProductId: 0,
                ProductName: document.getElementById("ProductName").value,
                CategoryId: document.getElementById("CategoryId").value,
                UnitPrice: document.getElementById("UnitPrice").value
            };

            fetch("https://localhost:7271/odata/Products", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                },
                body: JSON.stringify(product)
            })
                .then(response => {
                    if (response.ok) {
                        return response.json();
                    } else {
                        return response.json().then(errorData => {
                            throw new Error(errorData.error.message || "Server error");
                        });
                    }
                })
                .then(data => {
                    alert("Product created successfully!");
                    window.location.href = "/Product";
                })
                .catch(error => {
                    alert("Error creating product: " + error.message);
                });
        });
    });
</script>
